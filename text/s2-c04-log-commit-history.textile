h2. Log - the Commit History

So, now we have all this history in our Git repository.  So what?  What can we do with it?  How can we see this history?

The answer is the very powerful _git log_ command.  The 'log' command will show you nearly anything you want to know about your commit history.  Also, since the entire history is stored locally, it's really fast compared with most other SCM systems.

If you just run _git log_, you will get output like this:

shell. git-log.txt

This will show you the sha of each commit, the committer and date of the commit, and the full message, starting from the last commit on your current branch and going backward in reverse chronological order (so if there are multiple parents, it just orders them by date)

h3. Formatting Log Output

This all takes up a lot of space though, so there are ways to limit and format this output differently.  '--pretty' is a useful option for formatting the output in different ways. 
For example, we can list the commit shas and the first line of the message with '--pretty=oneline':

shell. git-log-oneline.txt

With '--pretty', you can choose between oneline, short, medium, full, fuller, email, raw and format:<string>, where <string> is a format you specify with variables.

h3. Filtering Log Output

There are also a number of options for filtering the log output.  You can specify the maximum number of commits you want to see with '-n', you can limit the range of dates you want to see commits for with --since and --until, you can filter it on the author or committer, text in the commit message and more.  Here is an example showing the last 30 commits between yesterday and a month ago by me with 'controller' in the message:

shell. git log -n 30 --since="1 month ago" --until=yesterday --author="schacon"

* "git log":http://www.kernel.org/pub/software/scm/git/docs/git-log.html